{"version":3,"sources":["../../app/handle/comment.js"],"names":[],"mappings":";;;;;;;;AAQA;;;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAM,QAAQ,uBAAd;AACA,IAAM,QAAQ,wBAAd;AACA,IAAM,UAAU,0BAAhB;;AAEA,IAAM,YAAY,SAAZ,SAAY,CAAS,IAAT,EAAe;AAC/B,MAAI,oCAAW,IAAX,EAAJ;AACA,MAAG,CAAC,KAAK,MAAT,EAAiB,OAAO,EAAP;;AAEjB,MAAI,SAAS,KAAK,MAAL,CAAY;AAAA,WAAK,EAAE,IAAF,IAAU,CAAf;AAAA,GAAZ,CAAb;;AAEA,SAAO,OAAP,CAAe,gBAAQ;AACrB,SAAK,OAAL,GAAe,KAAK,MAAL,CAAY;AAAA,aAAK,EAAE,UAAF,IAAgB,KAAK,GAA1B;AAAA,KAAZ,CAAf;AACD,GAFD;;AAIA,SAAO,MAAP;AACD,CAXD;;AAaA,IAAM,eAAe,SAAf,YAAe,CAAC,QAAD,EAAW,KAAX,EAAkB,MAAlB,EAA6B;AAChD,WAAS,OAAT,CAAiB,gBAAQ;AACvB,QAAM,OAAO,MAAM,MAAN,CAAa;AAAA,aAAK,KAAK,GAAL,IAAY,EAAE,EAAnB;AAAA,KAAb,EAAoC,CAApC,KAA0C,EAAvD;;AAEA,SAAK,WAAL,GAAmB,KAAK,IAAxB;AACA,SAAK,QAAL,GAAgB,KAAK,QAArB;AACA,SAAK,UAAL,GAAkB,KAAK,UAAvB;AACA,SAAK,MAAL,GAAc,OAAO,MAAP,CAAc;AAAA,aAAK,EAAE,UAAF,IAAgB,KAAK,GAA1B;AAAA,KAAd,CAAd;;AAEA,QAAG,KAAK,QAAR,EAAkB;AAChB,UAAM,QAAQ,MAAM,MAAN,CAAa;AAAA,eAAK,KAAK,QAAL,IAAiB,EAAE,EAAxB;AAAA,OAAb,EAAyC,CAAzC,KAA+C,EAA7D;AACA,WAAK,UAAL,GAAkB,MAAM,IAAxB;AACA,WAAK,SAAL,GAAiB,MAAM,QAAvB;AACD;AACF,GAbD;;AAeA,SAAO,QAAP;AACD,CAjBD;;kBAmBe;;;AAEb,eAFa,yBAEC,GAFD,EAEM,GAFN,EAEW;AACtB,QAAM,KAAK,IAAI,KAAJ,CAAU,GAArB;;AAEA,QAAG,EAAH,EAAO;AACL,cAAQ,IAAR,CAAa,EAAC,KAAK,EAAN,EAAb,EACG,IADH,GAEG,IAFH,CAEQ,UAAC,GAAD,EAAM,IAAN;AAAA,eAAe,IAAf;AAAA,OAFR,EAGG,IAHH,CAGQ,gBAAQ;AACZ,YAAI,OAAO,IAAI,GAAJ,EAAX;AACA,YAAI,OAAO,IAAI,GAAJ,EAAX;;AAEA,aAAK,OAAL,CAAa,aAAK;AAChB,eAAK,GAAL,CAAS,EAAE,GAAX;AACA,eAAK,GAAL,CAAS,EAAE,GAAX;AACD,SAHD;;AAKA,gBAAQ,GAAR,CAAY,CACR,MAAM,IAAN,CAAW,EAAC,YAAY,EAAC,kCAAS,IAAT,EAAD,EAAb,EAAX,EACG,IADH,GAEG,IAFH,CAEQ,UAAC,GAAD,EAAM,IAAN;AAAA,iBAAe,IAAf;AAAA,SAFR,CADQ,EAKR,MAAM,IAAN,CAAW,EAAC,IAAI,EAAC,kCAAS,IAAT,EAAD,EAAL,EAAX,EACG,IADH,GAEG,IAFH,CAEQ,UAAC,GAAD,EAAM,IAAN;AAAA,iBAAe,IAAf;AAAA,SAFR,CALQ,CAAZ,EAQK,IARL,CAQU,gBAAqB;AAAA;;AAAA,cAAnB,MAAmB;AAAA,cAAX,KAAW;;AAC3B,cAAM,WAAW,aAAa,IAAb,EAAmB,KAAnB,EAA0B,MAA1B,CAAjB;AACA,gCAAU,GAAV,EAAe,EAAC,MAAM,IAAP,EAAa,UAAU,UAAU,QAAV,CAAvB,EAAf;AACD,SAXH,EAWK,KAXL,CAWW;AAAA,iBAAO,sBAAU,GAAV,CAAP;AAAA,SAXX;AAYD,OAxBH;AAyBD,KA1BD,MA0BM;AACJ,4BAAU,GAAV;AACD;AACF,GAlCY;;;;AAqCb,eArCa,yBAqCC,GArCD,EAqCM,GArCN,EAqCW;AACtB,QAAM,UAAU,IAAI,OAAJ,CAAY,IAAI,IAAhB,CAAhB;;AAEA,YAAQ,IAAR,CAAa,UAAC,GAAD,EAAM,IAAN,EAAe;AAC1B,4BAAU,GAAV,EAAe,EAAC,MAAM,MAAM,KAAN,GAAc,IAArB,EAAf;AACD,KAFD;AAGD,GA3CY;;;;AA8Cb,aA9Ca,uBA8CD,GA9CC,EA8CI,GA9CJ,EA8CS;AACpB,QAAM,QAAQ,IAAI,KAAJ,CAAU,IAAI,IAAd,CAAd;;AAEA,UAAM,IAAN,CAAW,UAAC,GAAD,EAAM,IAAN,EAAe;AACxB,4BAAU,GAAV,EAAe,EAAC,MAAM,MAAM,KAAN,GAAc,IAArB,EAAf;AACD,KAFD;AAGD;AApDY,C","file":"comment.js","sourcesContent":["/*\n* @Author: woolson\n* @Date:   2016-12-18 00:15:45\n* @Email:   woolson.lee@gmail.com\n* @Last Modified by:   woolson\n* @Last Modified time: 2016-12-21 22:55:29\n*/\n\nimport mongoose from \"mongoose\"\nimport { jsonWrite } from \"../global/utils\"\nimport { commentsDB, usersDB, agreesDB } from \"../db/mongodb\"\n\nconst Users = usersDB()\nconst Agree = agreesDB()\nconst Comment = commentsDB()\n\nconst construct = function(data) {\n  let list = [...data]\n  if(!data.length) return []\n\n  let result = list.filter(o => o.type == 0)\n\n  result.forEach(item => {\n    item.replies = data.filter(o => o.comment_id == item._id)\n  })\n\n  return result\n}\n\nconst addUserAgree = (comments, users, agrees) => {\n  comments.forEach(item => {\n    const user = users.filter(o => item.uid == o.id)[0] || {}\n\n    item.author_name = user.name\n    item.html_url = user.html_url\n    item.avatar_url = user.avatar_url\n    item.agrees = agrees.filter(o => o.comment_id == item._id)\n\n    if(item.reply_id) {\n      const reply = users.filter(o => item.reply_id == o.id)[0] || {}\n      item.reply_name = reply.name\n      item.reply_url = reply.html_url\n    }\n  })\n\n  return comments\n}\n\nexport default {\n  // fetch all message list\n  fetchComments(req, res) {\n    const id = req.query.aid\n\n    if(id) {\n      Comment.find({aid: id})\n        .lean()\n        .exec((err, docs) => docs)\n        .then(data => {\n          let uids = new Set()\n          let cids = new Set()\n\n          data.forEach(o => {\n            cids.add(o._id)\n            uids.add(o.uid)\n          })\n\n          Promise.all([\n              Agree.find({comment_id: {$in: [...cids]}})\n                .lean()\n                .exec((err, docs) => docs)\n              ,\n              Users.find({id: {$in: [...uids]}})\n                .lean()\n                .exec((err, docs) => docs)\n            ]).then(([agrees, users]) => {\n              const comments = addUserAgree(data, users, agrees)\n              jsonWrite(res, {succ: true, comments: construct(comments)})\n            }).catch(err => jsonWrite(res))\n        })\n    }else {\n      jsonWrite(res)\n    }\n  },\n\n  // insert message\n  insertComment(req, res) {\n    const comment = new Comment(req.body)\n\n    comment.save((err, docs) => {\n      jsonWrite(res, {succ: err ? false : true})\n    })\n  },\n\n  // insert agree\n  insertAgree(req, res) {\n    const agree = new Agree(req.body)\n\n    agree.save((err, docs) => {\n      jsonWrite(res, {succ: err ? false : true})\n    })\n  }\n}"]}